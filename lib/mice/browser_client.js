// Generated by CoffeeScript 1.6.3
module.exports = function(port, secret, name) {
  var client, container, debug, dom, insert;
  debug = require('debug')('vertex-example');
  debug('name %s', name);
  client = require('vertex-client').create({
    uuid: name,
    context: {
      name: name
    },
    secret: 'secret',
    connect: {
      uri: "ws://localhost:" + port
    }
  });
  client.connect();
  dom = require('dom');
  container = dom('.container');
  document.onmousemove = function(e) {
    return client.socket.send(JSON.stringify({
      event: 'broadcast',
      data: {
        event: 'mousemove',
        x: e.x,
        y: e.y
      }
    }));
  };
  insert = function(uuid) {
    return container.append("<div>" + uuid + "</div>").addClass('peer').addClass(uuid).css({
      visibility: 'visible',
      position: 'absolute'
    });
  };
  return client.socket.on('message', function(payload) {
    var action, data, event, list, peer, selector, uuid, _results;
    data = JSON.parse(payload);
    event = data.event;
    uuid = data.uuid;
    selector = ".peer." + uuid;
    switch (event) {
      case 'peer':
        action = data.action;
        list = data.list;
        switch (action) {
          case 'list':
            _results = [];
            for (uuid in list) {
              _results.push(insert(uuid));
            }
            return _results;
            break;
          case 'join':
          case 'resume':
            if (!(peer = container.find(selector).els[0])) {
              peer = insert(uuid);
            }
            return dom(peer).css({
              visibility: 'visible',
              position: 'absolute'
            });
          case 'depart':
            return dom(selector).css({
              visibility: 'hidden',
              position: 'absolute'
            });
        }
        break;
      case 'mousemove':
        return dom(selector).css({
          top: "" + data.y + "px",
          left: "" + data.x + "px"
        });
    }
  });
};
