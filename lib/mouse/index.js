// Generated by CoffeeScript 1.6.3
var browserClient;

module.exports = function(port, secret) {
  var mouse;
  mouse = {
    controller: function(opts, callback) {
      return callback(null, {
        headers: {
          'Content-Type': 'text/javascript'
        },
        body: "(" + (browserClient.toString()) + ").call(self, '" + port + "', '" + secret + "', '" + opts.query.name + "');"
      });
    },
    view: function(opts, callback) {
      var name;
      name = opts.query.name || 'Untitled';
      return callback(null, {
        headers: {
          'Content-Type': 'text/html'
        },
        body: "<body>\n\n<script src=\"/build.js\"></script>\n<script src=\"./controller?name=" + name + "\"></script>\n                <!-- sneak name into script view url query -->\n</body>\n"
      });
    }
  };
  mouse.controller.$www = {};
  mouse.view.$www = {};
  return mouse;
};

module.exports.client = browserClient = function(port, secret, name) {
  var client, container, dom, insert;
  client = require('vertex-client').create({
    uuid: name,
    context: {
      name: name
    },
    secret: secret,
    connect: {
      uri: "ws://localhost:" + port
    }
  });
  client.connect();
  dom = require('dom');
  container = dom('body').append('<div></div>').css({
    width: '100%',
    height: '100%'
  }).on('mousemove', function(e) {
    return client.socket.send(JSON.stringify({
      event: 'broadcast',
      data: {
        event: 'mousemove',
        x: e.x,
        y: e.y
      }
    }));
  });
  insert = function(uuid) {
    return container.append("<div>" + uuid + "</div>").addClass('peer').addClass(uuid).css({
      visibility: 'visible',
      position: 'absolute'
    });
  };
  return client.socket.on('message', function(payload) {
    var action, data, event, list, peer, selector, uuid, _results;
    data = JSON.parse(payload);
    event = data.event;
    uuid = data.uuid;
    selector = ".peer." + uuid;
    switch (event) {
      case 'peer':
        action = data.action;
        list = data.list;
        switch (action) {
          case 'list':
            _results = [];
            for (uuid in list) {
              _results.push(insert(uuid));
            }
            return _results;
            break;
          case 'join':
          case 'resume':
            if (!(peer = container.find(selector).els[0])) {
              return insert(uuid);
            }
            return dom(peer).css({
              visibility: 'visible'
            });
          case 'depart':
            return dom(selector).css({
              visibility: 'hidden'
            });
        }
        break;
      case 'mousemove':
        return dom(selector).css({
          top: "" + data.y + "px",
          left: "" + data.x + "px"
        });
    }
  });
};
